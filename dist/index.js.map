{
  "version": 3,
  "sources": ["../lib/dstdevch.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dvariancech = require( '@stdlib/stats-base-dvariancech' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\n\n\n// MAIN //\n\n/**\n* Computes the standard deviation of a double-precision floating-point strided array using a one-pass trial mean algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} standard deviation\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dstdevch( N, 1, x, 1 );\n* // returns ~2.0817\n*/\nfunction dstdevch( N, correction, x, stride ) {\n\treturn sqrt( dvariancech( N, correction, x, stride ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dstdevch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dvariancech = require( '@stdlib/stats-base-dvariancech' ).ndarray;\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\n\n\n// MAIN //\n\n/**\n* Computes the standard deviation of a double-precision floating-point strided array using a one-pass trial mean algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} standard deviation\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dstdevch( N, 1, x, 2, 1 );\n* // returns 2.5\n*/\nfunction dstdevch( N, correction, x, stride, offset ) {\n\treturn sqrt( dvariancech( N, correction, x, stride, offset ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dstdevch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dstdevch = require( './dstdevch.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dstdevch, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dstdevch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the standard deviation of a double-precision floating-point strided array using a one-pass trial mean algorithm.\n*\n* @module @stdlib/stats-base-dstdevch\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dstdevch = require( '@stdlib/stats-base-dstdevch' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = dstdevch( N, 1, x, 1 );\n* // returns ~2.0817\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var dstdevch = require( '@stdlib/stats-base-dstdevch' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dstdevch.ndarray( N, 1, x, 2, 1 );\n* // returns 2.5\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dstdevch;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdstdevch = main;\n} else {\n\tdstdevch = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dstdevch;\n\n// exports: { \"ndarray\": \"dstdevch.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,gCAAiC,EACxDC,EAAO,QAAS,gCAAiC,EAuBrD,SAASC,EAAUC,EAAGC,EAAYC,EAAGC,EAAS,CAC7C,OAAOL,EAAMD,EAAaG,EAAGC,EAAYC,EAAGC,CAAO,CAAE,CACtD,CAKAP,EAAO,QAAUG,ICrDjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,gCAAiC,EAAE,QAC1DC,EAAO,QAAS,gCAAiC,EAyBrD,SAASC,EAAUC,EAAGC,EAAYC,EAAGC,EAAQC,EAAS,CACrD,OAAON,EAAMD,EAAaG,EAAGC,EAAYC,EAAGC,EAAQC,CAAO,CAAE,CAC9D,CAKAR,EAAO,QAAUG,ICvDjB,IAAAM,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAW,IACXC,EAAU,IAKdF,EAAaC,EAAU,UAAWC,CAAQ,EAK1CH,EAAO,QAAUE,ICejB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAWD,EAEXC,EAAWC,EAMZ,OAAO,QAAUD",
  "names": ["require_dstdevch", "__commonJSMin", "exports", "module", "dvariancech", "sqrt", "dstdevch", "N", "correction", "x", "stride", "require_ndarray", "__commonJSMin", "exports", "module", "dvariancech", "sqrt", "dstdevch", "N", "correction", "x", "stride", "offset", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dstdevch", "ndarray", "join", "tryRequire", "isError", "main", "dstdevch", "tmp"]
}
